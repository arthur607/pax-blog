name: Build and Push image to Registry

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: southamerica-east1 # TODO: update region of the Artifact Registry
  REPOSITORY: southamerica-east1-docker.pkg.dev/pax-blog/pax-repository # TODO: update to Artifact Registry docker repository
  IMAGE: pax-image
  RUN_SERVICE: paxblog

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package

      - name: Get JAR filename
        id: jar-name
        run: echo "::set-output name=jar_name::$(ls target/*.jar | head -n 1)"

      # Configure Workload Identity Federation and generate an access token.
      # Alternative option - authentication via credentials json
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_JSON_KEY }}'

      # Build the Docker image
      - name: Build
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev 
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
          JAR_FILE=$(basename ${{ steps.jar-name.outputs.jar_name }})
          docker buildx build \
            --tag "$REPOSITORY/$IMAGE:${{ github.sha }}" \
            --build-arg JAR_FILE=$JAR_FILE \
            --build-arg DB_URL=${{ secrets.DB_URL }} \
            --build-arg GITHUB_SHA="${{ github.sha }}" \
            --build-arg GITHUB_REF="${{ github.ref }}" --push .

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev 
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
          docker push "$REPOSITORY/$IMAGE:${{ github.sha }}"

      # Deploy image on Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: '${{ env.RUN_SERVICE }}'
          region: ${{ env.GAR_LOCATION }}
          image: $REPOSITORY/$IMAGE:${{ github.sha }}
          env_vars: |
            DB_URL=${{ secrets.DB_URL }}
            JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC

      # Set up kustomize
      - name: Set up Kustomize
        run: |
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
